{"version":3,"sources":["services/pokemonService.js","components/Filter/index.js","components/PokeList/index.js","components/Spinner/index.js","App.js","serviceWorker.js","index.js"],"names":["getPokemons","fetch","then","response","json","Filter","_this$props","this","props","getQuery","nameValue","react_default","a","createElement","className","type","placeholder","onChange","value","Component","PokeList","filterPokemons","length","map","item","index","key","id","src","img","alt","name","Spinner","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","fetchPokemons","data","console","log","pokeUrl","results","url","pokeArr","i","dataUrl","pokemon","sprites","front_default","getPokeTypes","types","push","setState","pokemons","setLocalStorage","catch","err","event","userQuery","currentTarget","query","filterQuery","_this$state","state","filter","includes","toLowerCase","isLoading","_this2","pokeData","localStorage","getItem","JSON","parse","setTimeout","dataPokeTypes","pokeTypeNames","j","setItem","stringify","components_Filter","Spinner_Spinner","components_PokeList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b58e62ae.chunk.js","sourcesContent":["const ENDPOINT = 'https://pokeapi.co/api/v2/pokemon/?limit=25';\n\nconst getPokemons = () => fetch(ENDPOINT)\n.then(response => response.json());\n\nexport {getPokemons};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Filter extends Component {\n    render() { \n        const {getQuery, nameValue} = this.props;\n        return (\n            <div className=\"app__filter\">\n                <input \n                    type=\"text\"\n                    className=\"app__input\"\n                    placeholder=\"Search Pokemons by name\"\n                    onChange={getQuery}\n                    value={nameValue}\n                />\n            </div>\n        );\n    }\n}\n\n\n\nFilter.propTypes = {\n    getQuery: PropTypes.func.isRequired,\n    nameValue: PropTypes.string.isRequired\n}\n\n\nexport default Filter;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass PokeList extends Component {\n\n    render() {\n        const {filterPokemons} = this.props;\n        if(filterPokemons.length === 0){\n            return <p>No matched results. Try to catch another pokemon</p>\n        } else {\n            return (\n                <ul className=\"app__list\">\n                    {filterPokemons.map((item, index) => {\n                        return (\n                            <li key={index} id={item.id} className=\"app__list-item\">\n                                <div className=\"pokemon\">\n                                    <img src={item.img} alt={item.name} />\n                                    <div className=\"pokemon__id\">ID / {item.id}</div>\n                                    <h2 className=\"pokemon__name\">{item.name}</h2>\n                                    {item.type.map((type, index) => {\n                                        return (\n                                            <span key={index} className=\"pokemon__types\">{type}</span>\n                                        );\n                                    })}\n                                </div>\n                            </li>\n                        );\n                    })}\n                </ul>\n            );\n        }\n        \n    }\n}\n\n\nPokeList.propTypes = {\n    filterPokemons: PropTypes.arrayOf(PropTypes.object).isRequired\n}\nexport default PokeList;","\nimport React from 'react'\nimport './index.scss';\n\nexport const Spinner = () => <div className=\"loader\">Loading...</div>","\nimport React, { Component } from \"react\";\nimport \"./App.scss\";\nimport { getPokemons } from \"./services/pokemonService\";\nimport Filter from \"./components/Filter\";\nimport PokeList from \"./components/PokeList\";\nimport { Spinner } from \"./components/Spinner\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pokemons: [],\n      query: '',\n      isLoading: true\n    };\n  }\n\n  componentDidMount() {\n    const pokeData = localStorage.getItem('pokeData');\n    if(!pokeData){\n      console.log('NOPOKE');\n      this.fetchPokemons();\n    }\n    else {\n      console.log('SIPOKE');\n      this.setState({\n        pokemons: JSON.parse(pokeData)\n      })\n    };\n      setTimeout(() => this.setState({isLoading: false}), 2000);\n\n  }\n\n  fetchPokemons = () =>{\n    getPokemons()\n      .then(data => {\n        console.log('FEEEEEEETCHING');\n        const pokeUrl = data.results.map(item => {\n          return item.url;\n        });\n        const pokeArr = [];\n        for (let i = 0; i < pokeUrl.length; i++) {\n          fetch(pokeUrl[i])\n            .then(response => response.json())\n            .then(dataUrl => {\n              const pokemon = {\n                name: dataUrl.name,\n                id: dataUrl.id,\n                img: dataUrl.sprites.front_default,\n                type: this.getPokeTypes(dataUrl.types)\n              };\n              pokeArr.push(pokemon);\n              this.setState({\n                pokemons: pokeArr\n              });\n              this.setLocalStorage(pokeArr);\n            });\n        }\n      })\n      .catch(err => console.log(err));\n  }\n\n  getPokeTypes(dataPokeTypes){\n    const pokeTypeNames = [];\n    for (let j = 0; j < dataPokeTypes.length; j++) {\n      pokeTypeNames.push(dataPokeTypes[j].type[\"name\"]);\n    }\n    return pokeTypeNames;\n  }\n\n  setLocalStorage(data){\n    localStorage.setItem('pokeData', JSON.stringify(data));\n  }\n\n\n  getQuery = (event) => {\n    const userQuery = event.currentTarget.value;\n    this.setState({\n      query: userQuery\n    });\n  }\n\n  filterQuery = () => {\n    const {pokemons, query} = this.state;\n    return pokemons.filter(item =>{\n      const pokeName = item.name;\n      return pokeName.includes(query.toLowerCase());\n    });\n  }\n\n\n  render() {\n    const filterPokemons = this.filterQuery();\n    const {query} = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"app__header\">\n          <div className=\"app__header-container\">\n            <h1 className=\"app__tittle\">Pokemon List</h1>\n            <Filter \n              getQuery={this.getQuery}\n              nameValue={query}\n            />\n          </div>\n          \n        </header>\n        <main className=\"main\">\n          {this.state.isLoading ? <Spinner /> : <PokeList filterPokemons={filterPokemons}/> }\n          \n          \n        </main>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}